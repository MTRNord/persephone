name: Tests

on:
  push:
    branches:
      - main
    paths:
      - '**.cpp'                # only execute on changes to cpp files
      - '**.hpp'                # only execute on changes to hpp files
      - 'CMakeLists.txt'        # or dependency updates
      - '.github/workflows/**'  # or workflow changes
      - 'complement/**'         # or complement changes
  pull_request:
    paths:
      - '**.cpp'                # only execute on changes to cpp files
      - '**.hpp'                # only execute on changes to hpp files
      - '.github/workflows/**'  # or dependency updates
      - '.github/workflows/**'  # or workflow changes
      - 'complement/**'         # or complement changes
  release:
    types: [ published ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    container: fedora:41
    steps:
      - name: Install git
        run: dnf install -y git
      - name: Checkout repository
        if: toJSON(github.event.pull_request) != '{}'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Checkout repository
        if: toJSON(github.event.pull_request) == '{}'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        shell: bash
        run: |
          dnf install -y lcov libicu-devel libasan libubsan libsodium-devel libpq-devel jsoncpp-devel hiredis-devel ldns ldns-devel yaml-cpp yaml-cpp-devel uuid-devel zlib-devel clang-tools-extra ninja-build cmake git clang
          
          # Due to https://bugzilla.redhat.com/show_bug.cgi?id=2338878 in /usr/lib/pkgconfig/ldns.pc we need to replace `includedir=/usr/include/ldns/ldns` with `includedir=/usr/include/ldns`.
          sed -i 's%includedir=/usr/include/ldns/ldns%includedir=/usr/include/ldns%g' /usr/lib64/pkgconfig/ldns.pc
          
          pushd /tmp
          [ ! -d /tmp/drogon ] && git clone https://github.com/drogonframework/drogon
          git config --global --add safe.directory /tmp/drogon
          pushd drogon
          git pull
          git submodule update --init
          [ ! -d /tmp/drogon/build ] && mkdir build
          pushd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_POSTGRESQL=ON -DBUILD_REDIS=OFF -DBUILD_SQLITE=OFF -DBUILD_MYSQL=OFF -DBUILD_ORM=ON -DBUILD_SHARED_LIBS=ON ..
          make
          make install
          ln -s /usr/local/lib64/libdrogon.so.1 /usr/lib64/libdrogon.so.1
          ln -s /usr/local/lib64/libtrantor.so.1 /usr/lib64/libtrantor.so.1
          popd
          popd
          popd
      - name: Test
        shell: bash
        run: |
          cmake -S . -B cmake-build-debug -DCMAKE_BUILD_TYPE=Debug -DDISABLE_TESTS=OFF -DCMAKE_CXX_FLAGS_DEBUG="-g -O0 -Wall -fprofile-arcs -ftest-coverage" -DCMAKE_C_FLAGS_DEBUG="-g -O0 -Wall -W -fprofile-arcs -ftest-coverage" -DCMAKE_EXE_LINKER_FLAGS="-fprofile-arcs -ftest-coverage"
          cp ./.lcovrc ~/.lcovrc
          cmake --build cmake-build-debug --config Debug
          pushd cmake-build-debug
          ctest -T Test -T Coverage --rerun-failed --output-on-failure
          popd
      - name: Report results to DeepSource
        shell: bash
        run: |
          # Tests have finished and a test coverage report is available
          pushd cmake-build-debug
          # Print the gcov version
          gcov --version
          lcov --version
          lcov --directory ./CMakeFiles --capture --output-file coverage.info
          # Remove dependencies from the coverage report
          lcov --remove coverage.info -o coverage_filtered.info '*/_deps/*'
          popd
          
          # show .git directory for debugging
          ls -la .git
          
          # Install deepsource CLI
          curl https://deepsource.io/cli | sh
          
          # From the root directory, run the report coverage command
          ./bin/deepsource report --analyzer test-coverage --key cxx --value-file ./cmake-build-debug/coverage_filtered.info

        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}

  # run Complement
  complement:
    name: "Complement (${{ matrix.label }})"
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: PostgreSQL
            postgres: Postgres
    steps:
      # Env vars are set file a file given by $GITHUB_PATH. We need both Go 1.19 and GOPATH on env to run Complement.
      # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      - name: "Set Go Version"
        run: |
          echo "$GOROOT_1_19_X64/bin" >> $GITHUB_PATH
          echo "~/go/bin" >> $GITHUB_PATH

      - name: "Install Complement Dependencies"
        # We don't need to install Go because it is included on the Ubuntu 20.04 image:
        # See https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md specifically GOROOT_1_19_X64
        run: |
          sudo apt-get update && sudo apt-get install -y libolm3 libolm-dev
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest

      - name: Run actions/checkout@v4 for persephone
        uses: actions/checkout@v4
        with:
          path: persephone

      # Attempt to check out the same branch of Complement as the PR. If it
      # doesn't exist, fallback to main.
      - name: Checkout complement
        shell: bash
        run: |
          mkdir -p complement
          # Attempt to use the version of complement which best matches the current
          # build. Depending on whether this is a PR or release, etc. we need to
          # use different fallbacks.
          #
          # 1. First check if there's a similarly named branch (GITHUB_HEAD_REF
          #    for pull requests, otherwise GITHUB_REF).
          # 2. Attempt to use the base branch, e.g. when merging into release-vX.Y
          #    (GITHUB_BASE_REF for pull requests).
          # 3. Use the default complement branch ("master").
          for BRANCH_NAME in "$GITHUB_HEAD_REF" "$GITHUB_BASE_REF" "${GITHUB_REF#refs/heads/}" "master"; do
            # Skip empty branch names and merge commits.
            if [[ -z "$BRANCH_NAME" || $BRANCH_NAME =~ ^refs/pull/.* ]]; then
              continue
            fi

            (wget -O - "https://github.com/matrix-org/complement/archive/$BRANCH_NAME.tar.gz" | tar -xz --strip-components=1 -C complement) && break
          done
          # This doesn't exist upstream
          cp persephone/complement/hs_persephone.go complement/runtime/

      # Build initial Persephone image
      - run: docker build -t complement-persephone -f complement/Dockerfile .
        working-directory: persephone
        env:
          DOCKER_BUILDKIT: 1

      # Run Complement
      - run: |
          set -o pipefail &&
          go test -v -json -tags persephone_blacklist ./tests ./tests/csapi 2>&1 | gotestfmt
        shell: bash
        name: Run Complement Tests
        env:
          COMPLEMENT_BASE_IMAGE: complement-persephone:latest
        working-directory: complement
